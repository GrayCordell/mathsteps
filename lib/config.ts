import {
  ArrayNodeDependencies,
  AssignmentNodeDependencies,
  ConstantNodeDependencies,
  ParserDependencies,
  addDependencies,
  bignumberDependencies,
  create,
  divideDependencies,
  gcdDependencies,
  isNegativeDependencies,
  isPositiveDependencies,
  isZeroDependencies,
  largerDependencies,
  lcmDependencies,
  modDependencies,
  multiplyDependencies,
  numberDependencies,
  signDependencies,
  simplifyDependencies,
  subtractDependencies,
  unequalDependencies,
} from 'mathjs'

export const defaultMathJsDependencies = {
  addDependencies,
  ArrayNodeDependencies,
  AssignmentNodeDependencies,
  bignumberDependencies,
  ConstantNodeDependencies,
  divideDependencies,
  isNegativeDependencies,
  isPositiveDependencies,
  isZeroDependencies,
  lcmDependencies,
  modDependencies,
  multiplyDependencies,
  numberDependencies,
  ParserDependencies,
  subtractDependencies,
  unequalDependencies,
  gcdDependencies,
  largerDependencies,
  signDependencies,
  simplifyDependencies,
}

export const AlgebraOnlyDependencies = {
  addDependencies,
  ArrayNodeDependencies,
  AssignmentNodeDependencies,
  bignumberDependencies,
  ConstantNodeDependencies,
  divideDependencies,
  isNegativeDependencies,
  isPositiveDependencies,
  isZeroDependencies,
  multiplyDependencies,
  numberDependencies,
  ParserDependencies,
  subtractDependencies,
  unequalDependencies,
  signDependencies,
  simplifyDependencies,
}

// change the default mathjs configuration.
// We want to store all constants as big number.
const math = create(defaultMathJsDependencies, {
  epsilon: 1e-12,
  matrix: 'Matrix',
  number: 'BigNumber',
  precision: 64,
  predictable: false,
  randomSeed: null,
})

// Export only necessary functions and constants
export const {
  abs,
  resolve,
  AccessorNode,
  add,
  bignumber,
  BlockNode,
  ConstantNode,
  compare,
  ConditionalNode,
  derivative,
  divide,
  equal,
  evaluate,
  FunctionNode,
  OperatorNode,
  IndexNode,
  isAccessorNode,
  isAssignmentNode,
  isBlockNode,
  isConditionalNode,
  isConstantNode,
  isFraction,
  isFunctionAssignmentNode,
  isFunctionNode,
  isIndexNode,
  isInteger,
  isNegative,
  isNode,
  isNumeric,
  isOperatorNode,
  isParenthesisNode,
  isPositive,
  isRangeNode,
  isSymbolNode,
  isZero,
  lcm,
  mod,
  multiply,
  parse,
  pow,
  print,
  subtract,
  SymbolNode,
  unequal,
  sign,
  larger,
  gcd,
} = math

export default {
  abs,
  AccessorNode,
  add,
  bignumber,
  BlockNode,
  ConstantNode,
  compare,
  ConditionalNode,
  derivative,
  divide,
  equal,
  evaluate,
  FunctionNode,
  OperatorNode,
  IndexNode,
  isAccessorNode,
  isAssignmentNode,
  isBlockNode,
  isConditionalNode,
  isConstantNode,
  isFraction,
  isFunctionAssignmentNode,
  isFunctionNode,
  isIndexNode,
  isInteger,
  isNegative,
  isNode,
  isNumeric,
  isOperatorNode,
  isParenthesisNode,
  isPositive,
  isRangeNode,
  isSymbolNode,
  isZero,
  lcm,
  mod,
  multiply,
  parse,
  pow,
  print,
  subtract,
  SymbolNode,
  unequal,
  resolve,
  sign,
  larger,
  gcd,
}
