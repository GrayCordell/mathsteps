// The text to identify rules for each possible step that can be taken

module.exports = {
  // My Temp Test
  SIMPLIFY_ARITHMETIC__TEST: 'SIMPLIFY_ARITHMETIC__TEST',
  // ARITHMETIC
  // e.g. 2 + 2 -> 4 or 2 * 2 -> 4
  SIMPLIFY_ARITHMETIC: 'SIMPLIFY_ARITHMETIC',
  SIMPLIFY_ARITHMETIC__ADD: 'SIMPLIFY_ARITHMETIC__ADD',
  SIMPLIFY_ARITHMETIC__SUBTRACT: 'SIMPLIFY_ARITHMETIC__SUBTRACT',
  SIMPLIFY_ARITHMETIC__MULTIPLY: 'SIMPLIFY_ARITHMETIC__MULTIPLY',
  SIMPLIFY_ARITHMETIC__POWER: 'SIMPLIFY_ARITHMETIC__POWER',

  // BASICS
  // e.g. 2/-1 -> -2
  DIVISION_BY_NEGATIVE_ONE: 'DIVISION_BY_NEGATIVE_ONE',
  // e.g. 2/1 -> 2
  DIVISION_BY_ONE: 'DIVISION_BY_ONE',
  // e.g. x * 0 -> 0
  MULTIPLY_BY_ZERO: 'MULTIPLY_BY_ZERO',
  // e.g. x * 2 -> 2x
  REARRANGE_COEFF: 'REARRANGE_COEFF',
  // e.g. x ^ 0 -> 1
  REDUCE_EXPONENT_BY_ZERO: 'REDUCE_EXPONENT_BY_ZERO',
  // e.g. 0/1 -> 0
  REDUCE_ZERO_NUMERATOR: 'REDUCE_ZERO_NUMERATOR',
  // e.g. 2 + 0 -> 2
  REMOVE_ADDING_ZERO: 'REMOVE_ADDING_ZERO',
  // e.g. x ^ 1 -> x
  REMOVE_EXPONENT_BY_ONE: 'REMOVE_EXPONENT_BY_ONE',
  // e.g. 1 ^ x -> 1
  REMOVE_EXPONENT_BASE_ONE: 'REMOVE_EXPONENT_BASE_ONE',
  // e.g. 0 ^ x -> 0
  REMOVE_EXPONENT_BASE_ZERO: 'REMOVE_EXPONENT_BASE_ZERO',
  // e.g. x * -1 -> -x
  REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: 'REMOVE_MULTIPLYING_BY_NEGATIVE_ONE',
  // e.g. x * 1 -> x
  REMOVE_MULTIPLYING_BY_ONE: 'REMOVE_MULTIPLYING_BY_ONE',
  // e.g. 2 - - 3 -> 2 + 3
  RESOLVE_DOUBLE_MINUS: 'RESOLVE_DOUBLE_MINUS',

  // COLLECT AND COMBINE AND BREAK UP
  // e.g. 2 + x + 3 + x -> 5 + 2x
  COLLECT_AND_COMBINE_LIKE_TERMS: 'COLLECT_AND_COMBINE_LIKE_TERMS',

  // FRACTIONS
  // e.g. (x + 2)/2 -> x/2 + 2/2
  BREAK_UP_FRACTION: 'BREAK_UP_FRACTION',
  // e.g. -2/-3 => 2/3
  CANCEL_MINUSES: 'CANCEL_MINUSES',
  // e.g. 2x/2 -> x
  CANCEL_TERMS: 'CANCEL_TERMS',
  // e.g. 2/6 -> 1/3
  SIMPLIFY_FRACTION: 'SIMPLIFY_FRACTION',
  // e.g. 2/-3 -> -2/3
  SIMPLIFY_SIGNS: 'SIMPLIFY_SIGNS',
  // e.g. 1/2 + 1/3 -> 5/6
  ADD_FRACTIONS: 'ADD_FRACTIONS',
  // e.g. 2/6 + 1/4 -> (2*2)/(6*2) + (1*3)/(4*3)
  COMMON_DENOMINATOR: 'COMMON_DENOMINATOR',
  // e.g. 1/2 * 2/3 -> 2/6
  MULTIPLY_FRACTIONS: 'MULTIPLY_FRACTIONS',

  // DISTRIBUTION
  // e.g. -(2 + x) -> -2 - x
  DISTRIBUTE_NEGATIVE_ONE: 'DISTRIBUTE_NEGATIVE_ONE',

  // ABSOLUTE
  // e.g. |-3| -> 3
  ABSOLUTE_VALUE: 'ABSOLUTE_VALUE',

  // ROOTS
  // e.g. nthRoot(x, 2) * nthRoot(x, 2) -> nthRoot(x^2, 2)
  MULTIPLY_NTH_ROOTS: 'MULTIPLY_NTH_ROOTS',

  //
  // KEMU
  //

  KEMU_ORIGINAL_EXPRESSION: 'KEMU_ORIGINAL_EXPRESSION',
  KEMU_MULTIPLY_SQRTS: 'KEMU_MULTIPLY_SQRTS',
  KEMU_MULTIPLY_SQRTS_WITH_COMMON_ROOT: 'KEMU_MULTIPLY_SQRTS_WITH_COMMON_ROOT',
  KEMU_MULTIPLY_POWERS_WITH_COMMON_BASE: 'KEMU_MULTIPLY_POWERS_WITH_COMMON_BASE',
  KEMU_DIVIDE_POWERS_WITH_COMMON_BASE: 'KEMU_DIVIDE_POWERS_WITH_COMMON_BASE',
  KEMU_CONVERT_ROOT_TO_POWER: 'KEMU_CONVERT_ROOT_TO_POWER',
  KEMU_CONVERT_POWER_TO_ROOT: 'KEMU_CONVERT_POWER_TO_ROOT',
  KEMU_POWER_FACTORS: 'KEMU_POWER_FACTORS',
  KEMU_POWER_FRACTION: 'KEMU_POWER_FRACTION',
  KEMU_POWER_SQRT: 'KEMU_POWER_SQRT',
  KEMU_SQRT_FROM_ZERO: 'KEMU_SQRT_FROM_ZERO',
  KEMU_SQRT_FROM_ONE: 'KEMU_SQRT_FROM_ONE',
  KEMU_SQRT_FROM_POW: 'KEMU_SQRT_FROM_POW',
  KEMU_SQRT_FROM_CONST: 'KEMU_SQRT_FROM_CONST',
  KEMU_ROOT_FROM_CONST: 'KEMU_ROOT_FROM_CONST',
  KEMU_ROOT_FROM_FRACTION: 'KEMU_ROOT_FROM_FRACTION',
  KEMU_POWER_TO_MINUS_ONE: 'KEMU_POWER_TO_MINUS_ONE',
  KEMU_POWER_TO_NEGATIVE_EXPONENT: 'KEMU_POWER_TO_NEGATIVE_EXPONENT',
  KEMU_MULTIPLY_EXPONENTS: 'KEMU_MULTIPLY_EXPONENTS',
  KEMU_REMOVE_UNNEDED_PARENTHESIS: 'KEMU_REMOVE_UNNEDED_PARENTHESIS',
  KEMU_REMOVE_FRACTION_WITH_UNIT_NUMERATOR: 'KEMU_REMOVE_FRACTION_WITH_UNIT_NUMERATOR',
  KEMU_REMOVE_DOUBLE_FRACTION: 'KEMU_REMOVE_DOUBLE_FRACTION',
  KEMU_NUMERICAL_SQRT: 'KEMU_NUMERICAL_SQRT',
  KEMU_NUMERICAL_DIV: 'KEMU_NUMERICAL_DIV',
  KEMU_FACTOR_EXPRESSION_UNDER_ROOT: 'KEMU_FACTOR_EXPRESSION_UNDER_ROOT',
  KEMU_DECIMAL_TO_FRACTION: 'KEMU_DECIMAL_TO_FRACTION',

  KEMU_SHORT_MULTIPLICATION_AB2_ADD: 'KEMU_SHORT_MULTIPLICATION_AB2_ADD',
  KEMU_SHORT_MULTIPLICATION_AB3_ADD: 'KEMU_SHORT_MULTIPLICATION_AB3_ADD',
  KEMU_SHORT_MULTIPLICATION_ABN_ADD: 'KEMU_SHORT_MULTIPLICATION_ABN_ADD',

  KEMU_SHORT_MULTIPLICATION_AB2_SUB: 'KEMU_SHORT_MULTIPLICATION_AB2_SUB',
  KEMU_SHORT_MULTIPLICATION_AB3_SUB: 'KEMU_SHORT_MULTIPLICATION_AB3_SUB',
  KEMU_SHORT_MULTIPLICATION_ABN_SUB: 'KEMU_SHORT_MULTIPLICATION_ABN_SUB',

  KEMU_FUNCTION_VALUE: 'KEMU_FUNCTION_VALUE',
  KEMU_PYTHAGOREAN_IDENTITY: 'KEMU_PYTHAGOREAN_IDENTITY',
  KEMU_EVEN_FUNCTION_OF_NEGATIVE: 'KEMU_EVEN_FUNCTION_OF_NEGATIVE',
  KEMU_ODD_FUNCTION_OF_NEGATIVE: 'KEMU_ODD_FUNCTION_OF_NEGATIVE',
  KEMU_CONVERT_SIN_PER_COS_TO_TAN: 'KEMU_CONVERT_SIN_PER_COS_TO_TAN',
  KEMU_CONVERT_COS_PER_SIN_TO_COT: 'KEMU_CONVERT_COS_PER_SIN_TO_COT',
  KEMU_CANCEL_INVERSE_FUNCTION: 'KEMU_CANCEL_INVERSE_FUNCTION',
  KEMU_DISTRIBUTE_MUL_OVER_ADD: 'KEMU_DISTRIBUTE_MUL_OVER_ADD',

  PERCENTS_ADD: 'PERCENTS_ADD',
  PERCENTS_SUB: 'PERCENTS_SUB',
  PERCENTS_CONVERT_TO_FRACTION: 'PERCENTS_CONVERT_TO_FRACTION',

  KEMU_LOG_XY_FROM_ONE: 'KEMU_LOG_XY_FROM_ONE',
  KEMU_LOG_XY_FROM_BASE: 'KEMU_LOG_XY_FROM_BASE',
  KEMU_LOG_XY_FROM_POWER: 'KEMU_LOG_XY_FROM_POWER',
}
