/**
 * Counts the occurrences of items in an array based on a given key function.
 * If no key function is provided, counts items by their value.
 *
 * @template T - The type of the elements in the array.
 * @template K - The type of the keys generated by the key function.
 *
 * @param {T[]} array - The input array containing items to count.
 * @param {(item: T) => K} [keyFn] - Optional function to extract a key from each item.
 * If not provided, the function will use the items themselves as keys.
 *
 * @returns {Map<K, number>} - A map where each key is a unique identifier for items and the value is the count of occurrences.
 *
 * @example
 * // Count occurrences of numbers in an array
 * const numbers = [1, 2, 2, 3, 3, 3];
 * const numberCounts = countOccurrences(numbers);
 * console.log(numberCounts); // Map { 1 => 1, 2 => 2, 3 => 3 }
 *
 * @example
 * // Count occurrences of objects based on a specific property
 * const people = [
 *   { name: 'Alice', age: 30 },
 *   { name: 'Bob', age: 25 },
 *   { name: 'Alice', age: 30 },
 *   { name: 'Charlie', age: 25 }
 * ];
 * const nameCounts = countOccurrences(people, person => person.name);
 * console.log(nameCounts); // Map { 'Alice' => 2, 'Bob' => 1, 'Charlie' => 1 }
 *
 * @example
 * // Count occurrences based on multiple properties by serializing the object
 * const personCounts = countOccurrences(people, person => `${person.name}-${person.age}`);
 * console.log(personCounts); // Map { 'Alice-30' => 2, 'Bob-25' => 1, 'Charlie-25' => 1 }
 */
export function countOccurrences<T, K = T>(
  array: T[],
  keyFn: (item: T) => K
  = (item: T) => item as unknown as K,
): Map<K, number> {
  const counts = new Map<K, number>()
  for (const item of array) {
    const key = keyFn(item)
    counts.set(key, (counts.get(key) || 0) + 1)
  }
  return counts
}
